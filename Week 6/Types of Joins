target_headers=['TRACT', 'POPULATION']
target_table = [
    [30101, 2646],
    [30103, 2375],
    [30104, 3424],
    [30200, 5346],
    [30300, 4428],
    [30400, 5543],
]

join_headers = ['TRACT', 'RISK_SCORE', 'RISK_RATING']
join_table = [
    [30101, 17.5, 'Very Low'],
    [30103, 5.1, 'Very Low'],
    [30104, 28.1, 'Relatively Low'],
    [30200, 54.4, 'Relatively Low'],
    [30700, 59.7, 'Relatively Low'],
    [30801, 22.6, 'Very Low'],

]

unique_id_name = 'TRACT' #every Join requred a common unique ID that is shared btwn Target and Join tables

target_id_set = set([row[target_headers.index(unique_id_name)] for row in target_table]) #s
join_id_set = set([row[join_headers.index(unique_id_name)] for row in join_table])

#print(target_id_set)
#print(join_id_set)

#print(target_id_set.intersection(join_id_set)) #identify the unique IDs that are shared btwn the two sets to use in inner join

#first goal is to create a Join dictionary from the Join table. this dicstionary will contain all the rows from the Join table where the key is the unique ID and the value is the entire row

join_dict = {}
for row in join_table:

    unique_id = row[join_headers.index(unique_id_name)] #get the unique_id by indexing our Join table for each value in the TRACT column

    join_dict[unique_id] = row #populate the Join dict by creating key value pairds where unique id : row

from pprint import pprint
#pprint(join_dict, width = 60) #shows us that now we have a dictionary where each unique ID key is paried with each row

#inner join
joined_headers = target_headers + join_headers #our final Joined Table will contain the columns of both the Target and Join tabbles
inner_joined_table = []

for target_row in target_table: # the for loop in python will iterate through a list, one element at a time, in this case a row
    unique_id = target_row[target_headers.index(unique_id_name)]

    if unique_id in join_dict: #inner join will only match if the unique ID exists in both the Target and Join table
        join_row = join_dict[unique_id] #access the matching Join row by the unique ID
        inner_joined_table.append(target_row+join_row)

#print(joined_headers)
#for row in inner_joined_table:
    #print(row)


#left outer join

joined_headers = target_headers + join_headers #our final Joined Table will contain the columns of both the Target and Join tabbles
left_joined_table = []

for target_row in target_table: # the for loop in python will iterate through a list, one element at a time, in this case a row
    unique_id = target_row[target_headers.index(unique_id_name)]

    if unique_id in join_dict: #inner join will only match if the unique ID exists in both the Target and Join table
        join_row = join_dict[unique_id] #access the matching Join row by the unique ID

    else: 
        join_row = [None] * len(join_headers) #if unique ID doesn't match, create a NULL join row

    left_joined_table.append(target_row+join_row)

print(joined_headers)
for row in left_joined_table:
    print(row)

# the Joined Table includes the Inner Joined rows and also includes rows that exist in the Target Table that do NOT exist in Join Table

#full outer join

#step 1: left outer join

joined_headers = target_headers + join_headers #our final Joined Table will contain the columns of both the Target and Join tabbles
outer_joined_table = []

for target_row in target_table:
    unique_id = target_row[target_headers.index(unique_id_name)]

    if unique_id in join_dict: #inner join will only match if the unique ID exists in both the Target and Join table
        join_row = join_dict[unique_id] #access the matching Join row by the unique ID

    else: 
        join_row = [None] * len(join_headers) #if unique ID doesn't match, create a NULL join row

    outer_joined_table.append(target_row+join_row)

#step 2 : insert missing target rows

target_id_set = set([row[target_headers.index(unique_id_name)] for row in target_table])

for unique_id in join_dict:

    if unique_id not in target_id_set:
        join_row = join_dict[unique_id]

        target_row = [None] * len(target_headers)
        outer_joined_table.append(target_row + join_row)

print(join_headers)
for row in outer_joined_table:
    print(row)